{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\namh0\\\\words-game\\\\src\\\\Componentes\\\\Ahorcado.js\";\nimport React, { Component } from 'react';\nimport Imagen from './Imagen';\nimport Botonera from './Botonera';\nimport Palabra_Adivinada_Hasta_El_Momento from './Palabra_Adivinada_Hasta_El_Momento';\nimport Dialog from 'react-bootstrap-dialog';\n\nclass Ahorcado extends Component {\n  constructor(props) {\n    super(props);\n    this.getBotoneraVacia = this.getBotoneraVacia.bind(this);\n    this.Se_Pulso_Boton = this.Se_Pulso_Boton.bind(this);\n    this.getPalabra_Adivinada = this.getPalabra_Adivinada.bind(this);\n    this.getPalabra_Adivinada_Hasta_El_Momento = this.getPalabra_Adivinada_Hasta_El_Momento.bind(this);\n    this.Open_Modal = this.Open_Modal.bind(this);\n    let Palabra_Adivinada = this.getPalabra_Adivinada();\n    this.state = {\n      numFallos: 0,\n      numAciertos: 0,\n      Palabra_Adivinada: Palabra_Adivinada,\n      palabra_Adivinada_Hasta_El_Momento: this.getPalabra_Adivinada_Hasta_El_Momento(Palabra_Adivinada),\n      botones: this.getBotoneraVacia()\n    };\n  }\n\n  getPalabra_Adivinada_Hasta_El_Momento(palabra) {\n    let guiones = \"\";\n\n    for (let i = 0; i < palabra.length; i++) {\n      guiones += \"-\";\n    }\n\n    return guiones;\n  }\n\n  getPalabra_Adivinada() {\n    let palabras = [\"CARACOLA\", \"ESPECIMEN\", \"PERSONA\"];\n    let Num_Aleatorio = Math.floor(Math.random() * palabras.length);\n    let palabra = palabras[Num_Aleatorio];\n    return palabra;\n  }\n\n  getBotoneraVacia() {\n    let letras = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"Ã‘\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"];\n    let botones = [];\n    botones = letras.map(l => ({\n      letra: l,\n      estado: \"no-pulsado\"\n    }));\n    return botones;\n  }\n\n  Se_Pulso_Boton(i) {\n    let letra = this.state.botones[i].letra;\n    let botonesAux = this.state.botones;\n\n    if (this.Hay_Acierto(letra)) {\n      botonesAux[i].estado = \"pulsado-acertado\";\n      this.setState(prevState => ({\n        botones: botonesAux\n      }));\n    } else {\n      botonesAux[i].estado = \"pulsado-no-acertado\";\n      this.setState(prevState => ({\n        numFallos: prevState.numFallos + 1,\n        botones: botonesAux\n      }));\n    }\n  }\n\n  componentDidUpdate() {\n    if (this.state.numAciertos == this.state.Palabra_Adivinada.length) {\n      this.Open_Modal(\"GANASTE\");\n      this.reinicializar();\n    }\n\n    if (this.state.numFallos == 7) {\n      this.dialog.showAlert('PERDISTE!');\n      this.reinicializar();\n    }\n  }\n\n  reinicializar() {\n    let Palabra_Adivinada = this.getPalabra_Adivinada();\n    this.setState({\n      numFallos: 0,\n      numAciertos: 0,\n      Palabra_Adivinada: Palabra_Adivinada,\n      palabra_Adivinada_Hasta_El_Momento: this.getPalabra_Adivinada_Hasta_El_Momento(Palabra_Adivinada),\n      botones: this.getBotoneraVacia()\n    });\n  }\n\n  Hay_Acierto(letra) {\n    let acierto = false;\n\n    for (let i = 0; i < this.state.Palabra_Adivinada.length; i++) {\n      if (this.state.Palabra_Adivinada.charAt(i) === letra) {\n        this.setState(prevState => ({\n          numAciertos: prevState.numAciertos + 1,\n          palabra_Adivinada_Hasta_El_Momento: prevState.palabra_Adivinada_Hasta_El_Momento.substr(0, i) + letra + prevState.palabra_Adivinada_Hasta_El_Momento.substr(i + 1)\n        }));\n        acierto = true;\n      }\n    }\n\n    return acierto;\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(Imagen, {\n      numFallos: this.state.numFallos,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Palabra_Adivinada_Hasta_El_Momento, {\n      Palabra_Adivinada_Hasta_El_Momento: this.state.palabra_Adivinada_Hasta_El_Momento,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Botonera, {\n      Se_Pulso_Boton: i => this.Se_Pulso_Boton(i),\n      botones: this.state.botones,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Dialog, {\n      ref: el => {\n        this.dialog = el;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }\n    }));\n  }\n\n  Open_Modal(mensaje) {\n    this.dialog.show({\n      title: mensaje,\n      body: 'La palabra era' + this.state.Palabra_Adivinada + \". Pulsa Ok para jugar otra vez\",\n      actions: [Dialog.OKAction()],\n      bsSize: 'small'\n    });\n  }\n\n}\n\nexport default Ahorcado;","map":{"version":3,"sources":["C:/Users/namh0/words-game/src/Componentes/Ahorcado.js"],"names":["React","Component","Imagen","Botonera","Palabra_Adivinada_Hasta_El_Momento","Dialog","Ahorcado","constructor","props","getBotoneraVacia","bind","Se_Pulso_Boton","getPalabra_Adivinada","getPalabra_Adivinada_Hasta_El_Momento","Open_Modal","Palabra_Adivinada","state","numFallos","numAciertos","palabra_Adivinada_Hasta_El_Momento","botones","palabra","guiones","i","length","palabras","Num_Aleatorio","Math","floor","random","letras","map","l","letra","estado","botonesAux","Hay_Acierto","setState","prevState","componentDidUpdate","reinicializar","dialog","showAlert","acierto","charAt","substr","render","el","mensaje","show","title","body","actions","OKAction","bsSize"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Imagen from './Imagen';\nimport Botonera from './Botonera';\nimport Palabra_Adivinada_Hasta_El_Momento from './Palabra_Adivinada_Hasta_El_Momento';\nimport Dialog from 'react-bootstrap-dialog';\n\n\nclass Ahorcado extends Component{\n  constructor(props){\n    super(props);\n    \n    this.getBotoneraVacia = this.getBotoneraVacia.bind(this);\n    this.Se_Pulso_Boton = this.Se_Pulso_Boton.bind(this);\n    this.getPalabra_Adivinada = this.getPalabra_Adivinada.bind(this);\n    this.getPalabra_Adivinada_Hasta_El_Momento = this.getPalabra_Adivinada_Hasta_El_Momento.bind(this);\n    this.Open_Modal = this.Open_Modal.bind(this);\n\n    let Palabra_Adivinada = this.getPalabra_Adivinada();\n\n    this.state={\n      numFallos: 0,\n      numAciertos: 0,\n      Palabra_Adivinada: Palabra_Adivinada,\n      palabra_Adivinada_Hasta_El_Momento: this.getPalabra_Adivinada_Hasta_El_Momento(Palabra_Adivinada),\n      botones: this.getBotoneraVacia()\n    };\n  }\n  getPalabra_Adivinada_Hasta_El_Momento(palabra){\n    let guiones = \"\";\n    for(let i = 0; i < palabra.length; i++){\n      guiones += \"-\";\n    }\n    return guiones;\n  }\n\n  getPalabra_Adivinada(){\n    let palabras = [\"CARACOLA\", \"ESPECIMEN\", \"PERSONA\"];\n    let Num_Aleatorio = Math.floor(Math.random()*palabras.length);\n    let palabra = palabras[Num_Aleatorio];\n    return palabra;\n  }\n\n  getBotoneraVacia(){\n    let letras = [\n        \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\",\n        \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\",\n        \"Ã‘\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\",\n        \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"\n    ];\n\n    let botones = [];\n\n    botones = letras.map((l)=> ({letra: l, estado: \"no-pulsado\"}));\n\n    return botones;\n  }\n\nSe_Pulso_Boton(i){\n  let letra = this.state.botones[i].letra;\n  let botonesAux = this.state.botones;\n  \n  if(this.Hay_Acierto(letra)){\n    botonesAux[i].estado = \"pulsado-acertado\";\n    this.setState((prevState) => ({\n      botones: botonesAux\n    }));\n  } else{\n    botonesAux[i].estado = \"pulsado-no-acertado\";\n    this.setState((prevState) => ({\n     numFallos: prevState.numFallos + 1,\n      botones: botonesAux\n    }));\n  }\n}\n\ncomponentDidUpdate(){\n  if(this.state.numAciertos == this.state.Palabra_Adivinada.length){\n    this.Open_Modal(\"GANASTE\");\n    this.reinicializar();\n  }\n  if(this.state.numFallos == 7){\n    this.dialog.showAlert('PERDISTE!');\n    this.reinicializar();\n  }\n}\n\nreinicializar(){\n  let Palabra_Adivinada = this.getPalabra_Adivinada();\n\n    this.setState({\n        numFallos: 0,\n        numAciertos: 0,\n        Palabra_Adivinada: Palabra_Adivinada,\n        palabra_Adivinada_Hasta_El_Momento: this.getPalabra_Adivinada_Hasta_El_Momento(Palabra_Adivinada),\n        botones: this.getBotoneraVacia()\n      });\n}\n\nHay_Acierto(letra){\n  let acierto = false;\n  for(let i = 0; i < this.state.Palabra_Adivinada.length; i++){\n    if(this.state.Palabra_Adivinada.charAt(i) === letra){\n      this.setState((prevState) => ({\n        numAciertos: (prevState.numAciertos) + 1,\n        palabra_Adivinada_Hasta_El_Momento: prevState.palabra_Adivinada_Hasta_El_Momento.substr(0, i) +\n        letra + prevState.palabra_Adivinada_Hasta_El_Momento.substr(i + 1)\n      }));\n      acierto = true;\n    }\n    \n  }\n  return acierto;\n}\nrender() {\n  return (\n    <div>\n        <Imagen numFallos={this.state.numFallos}/>\n\n        <Palabra_Adivinada_Hasta_El_Momento\n        Palabra_Adivinada_Hasta_El_Momento = {this.state.palabra_Adivinada_Hasta_El_Momento}/>\n\n        <Botonera Se_Pulso_Boton = {(i) => this.Se_Pulso_Boton(i)} botones = {this.state.botones}/>\n\n        <Dialog ref={(el) => { this.dialog = el }} />\n\n       </div>\n    );\n  }\n  Open_Modal(mensaje){\n    this.dialog.show({\n      title: mensaje,\n      body: 'La palabra era' + this.state.Palabra_Adivinada + \". Pulsa Ok para jugar otra vez\",\n      actions: [\n        Dialog.OKAction()\n      ],\n      bsSize: 'small',\n      \n      \n    })\n  }\n}\n\nexport default Ahorcado;\n"]},"metadata":{},"sourceType":"module"}